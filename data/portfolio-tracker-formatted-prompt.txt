README.md:
```
[![python](https://img.shields.io/badge/Python-3.11-3776AB.svg?style=flat&logo=python&logoColor=white)](https://www.python.org) [![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://choosealicense.com/licenses/mit/)

# Portfolio Tracker

### Status

Stock Analytics: (Currently only testing in jupyter notebooks)

- [x] Current portfolio dashboard: valuation and breakdown
- [X] Realized and unrealized gains from historic positions (FIFO method)
- [ ] Portfolio performance over time and benchmark comparison
- [ ] Dividends and Commissions
- [ ] Tax calculation on capital gains

To be added at a later stage:
- [ ] Compatibility with Google sheets
- [x] Index funds
    - TODO: Possibly create separate tracker for owned index funds from individual stocks
- [ ] Crypto assets
- [ ] Forex and cash positions

Bugs to be fixed:
- [ ] Fetching exchange rates


### Setup

1. Clone the repository:

```bash
git clone https://github.com/magurh/ML-encryption.git
cd ML-encryption
```

2. `uv` is used for dependency management. Whenever new dependencies are added, run:

```bash
uv sync --all-extras
```

To use Jupyter Lab, set the kernel to the fast-updates-monitoring environment created by poetry:

```bash
uv run python -m ipykernel install --user --name=fast-updates-analysis
```

One can open Jupyter lab using `poetryuv run jupyter lab`. To add new dependencies, use: `uv add <dependency>`.


3. Add your data in the `data` folder and follow formatting instructions [TBD]. Make sure that all tickers are available through `yfinance` package -- for instance, VUSA needs to be replaced by VUSA.AS.
```

Directory Structure:
.gitignore
LICENSE
README.md
__init__.py
[assets/]
    dark_mode.css
[data/]
    type1.csv
    type2.csv
    type3.csv
[notebooks/]
    testing.ipynb
[portfolio_tracker/]
    __init__.py
    app.py
    config.py
    data_fetching.py
    layout.py
    loader.py
    manager.py
    utils.py
pyproject.toml
uv.lock


README.md:
```
[![python](https://img.shields.io/badge/Python-3.11-3776AB.svg?style=flat&logo=python&logoColor=white)](https://www.python.org) [![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://choosealicense.com/licenses/mit/)

# Portfolio Tracker

### Status

Stock Analytics: (Currently only testing in jupyter notebooks)

- [x] Current portfolio dashboard: valuation and breakdown
- [X] Realized and unrealized gains from historic positions (FIFO method)
- [ ] Portfolio performance over time and benchmark comparison
- [ ] Dividends and Commissions
- [ ] Tax calculation on capital gains

To be added at a later stage:
- [ ] Compatibility with Google sheets
- [x] Index funds
    - TODO: Possibly create separate tracker for owned index funds from individual stocks
- [ ] Crypto assets
- [ ] Forex and cash positions

Bugs to be fixed:
- [ ] Fetching exchange rates


### Setup

1. Clone the repository:

```bash
git clone https://github.com/magurh/ML-encryption.git
cd ML-encryption
```

2. `uv` is used for dependency management. Whenever new dependencies are added, run:

```bash
uv sync --all-extras
```

To use Jupyter Lab, set the kernel to the fast-updates-monitoring environment created by poetry:

```bash
uv run python -m ipykernel install --user --name=fast-updates-analysis
```

One can open Jupyter lab using `poetryuv run jupyter lab`. To add new dependencies, use: `uv add <dependency>`.


3. Add your data in the `data` folder and follow formatting instructions [TBD]. Make sure that all tickers are available through `yfinance` package -- for instance, VUSA needs to be replaced by VUSA.AS.
```

__init__.py:
```

```

    assets/dark_mode.css:
    ```
.dark-dropdown .Select-control {
    background-color: #1e1e1e !important;
    color: #e0e0e0 !important;
    border: 1px solid #444 !important;
}

.dark-dropdown .Select-menu-outer {
    background-color: #2c2c2c !important;
    color: #e0e0e0 !important;
}

.dark-dropdown .Select-option {
    background-color: #2c2c2c !important;
    color: #e0e0e0 !important;
}

.dark-dropdown .Select-option.is-focused {
    background-color: #333 !important;
}

.dark-dropdown .Select-option.is-selected {
    background-color: #444 !important;
    color: #ffffff !important;
    font-weight: bold;
}

.dark-dropdown .Select-placeholder {
    color: #e0e0e0 !important;
}

.dark-dropdown .Select-arrow-zone {
    border-left: 1px solid #444 !important;
}

body {
    background-color: #121212; /* Dark background */
    color: #e0e0e0;           /* Light text color */
    font-family: Arial, sans-serif; /* Optional font styling */
}

.container {
    background-color: #1e1e1e; /* Slightly lighter background for containers */
    color: #e0e0e0;           /* Ensure text is readable */
    border-radius: 8px;       /* Add rounded corners for containers */
    padding: 20px;            /* Add some padding for better layout */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2); /* Optional shadow */
}

/* Adjust the header styles */
h1, h2, h3, h4, h5, h6 {
    color: #ffffff; /* Ensure headers are white */
}

    ```

    notebooks/testing.ipynb:
    ```
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d468ad6b-144e-4095-be35-147e9722031c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from adjustText import adjust_text\n",
    "\n",
    "\n",
    "# import ccxt\n",
    "# import ffn\n",
    "import os\n",
    "import sys\n",
    "\n",
    "module_path = os.path.abspath(\"../\")  # root directory\n",
    "if module_path not in sys.path:\n",
    "    sys.path.append(module_path)\n",
    "\n",
    "from portfolio_tracker.manager import Stocks, PortfolioManager\n",
    "from portfolio_tracker.loader import DataLoader\n",
    "\n",
    "\n",
    "# Manually set paths to data files\n",
    "data_path = module_path + \"\\\\data\\\\personal_data\\\\\"\n",
    "\n",
    "type1_PATH = data_path + \"type1.csv\"\n",
    "type2_PATH = data_path + \"type2.csv\"\n",
    "type3_PATH = data_path + \"type3.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d0b76c3c-1fab-400b-a293-05e021d95363",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load sample data\n",
    "type1_df = pd.read_csv(type1_PATH)\n",
    "# type2_df = pd.read_csv(type2_PATH)\n",
    "# type3_df = pd.read_csv(type3_PATH)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "803f0b2d-4372-4f2d-a884-d02e629bbdd7",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Add data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7809e24d-a315-46cf-b91b-0e95bcdb9fbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from csv import DictWriter\n",
    "\n",
    "field_names = list(type1_df.columns)\n",
    "# Dictionary that we want to add as a new row\n",
    "dict = {\n",
    "    \"date\": \"01/20/2023\",\n",
    "    \"security\": \"TSLA\",\n",
    "    \"type_of_asset\": \"stock\",\n",
    "    \"action\": \"sell\",\n",
    "    \"quantity\": 4,\n",
    "    \"total_transaction_price_usd\": 810,\n",
    "}\n",
    "\n",
    "# Open CSV file in append mode\n",
    "# Create a file object for this file\n",
    "with open(type1_PATH, \"a\") as f_object:\n",
    "    # Pass the file object and a list\n",
    "    # of column names to DictWriter()\n",
    "    # You will get a object of DictWriter\n",
    "    dictwriter_object = DictWriter(f_object, fieldnames=field_names)\n",
    "\n",
    "    # Pass the dictionary as an argument to the Writerow()\n",
    "    dictwriter_object.writerow(dict)\n",
    "\n",
    "    # Close the file object\n",
    "    f_object.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af77cbd5-fba3-4371-bb23-6886e93921b0",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8fd995cf-8ca1-4956-bce7-495dc48e0ed2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_portfolio_distribution_3d(owned_assets_dict, current_stock_values):\n",
    "    \"\"\"\n",
    "    Plots a 3D-like pie chart showing the distribution of the portfolio's value among the owned stocks.\n",
    "\n",
    "    Parameters:\n",
    "    - owned_assets_dict (dict): Dictionary where keys are stock names and values are total number of shares owned.\n",
    "    - current_stock_values (dict): Dictionary where keys are stock names and values are current values in USD.\n",
    "    \"\"\"\n",
    "    # Calculate the total value for each stock in the portfolio\n",
    "    portfolio_values = {\n",
    "        stock: owned_assets_dict[stock] * current_stock_values[stock]\n",
    "        for stock in owned_assets_dict\n",
    "    }\n",
    "\n",
    "    # Extract the labels and values for the pie chart\n",
    "    labels = list(portfolio_values.keys())\n",
    "    sizes = list(portfolio_values.values())\n",
    "\n",
    "    # Define colors for the chart\n",
    "    colors = plt.cm.tab20.colors  # You can customize this as needed\n",
    "\n",
    "    # Create an 'explode' list to create space between the slices\n",
    "    explode = [0.05] * len(labels)  # Adjust the explode value to change the gap size\n",
    "\n",
    "    # Number of layers to create the 3D effect\n",
    "    layers = 5\n",
    "    gap = 0.03  # Gap between layers\n",
    "\n",
    "    fig, ax = plt.subplots(figsize=(8, 8))\n",
    "\n",
    "    for i in range(layers):\n",
    "        radius = 1 - i * gap\n",
    "        if i == 0:\n",
    "            wedges, texts, autotexts = ax.pie(\n",
    "                sizes,\n",
    "                labels=labels,\n",
    "                autopct=\"%1.1f%%\",\n",
    "                colors=colors,\n",
    "                explode=explode,\n",
    "                startangle=140,\n",
    "                radius=radius,\n",
    "                shadow=True,\n",
    "                wedgeprops=dict(width=0.3, edgecolor=\"w\"),\n",
    "            )\n",
    "        else:\n",
    "            wedges, texts = ax.pie(\n",
    "                sizes,\n",
    "                labels=None,\n",
    "                colors=colors,\n",
    "                explode=explode,\n",
    "                startangle=140,\n",
    "                radius=radius,\n",
    "                shadow=True,\n",
    "                wedgeprops=dict(width=0.3, edgecolor=\"w\"),\n",
    "            )\n",
    "\n",
    "    if \"autotexts\" in locals():\n",
    "        # Adjust percentage labels to avoid overlap\n",
    "        for autotext in autotexts:\n",
    "            autotext.set_fontsize(8)\n",
    "            autotext.set_bbox(dict(facecolor=\"white\", edgecolor=\"none\", alpha=0.6))\n",
    "\n",
    "    # Use adjustText to avoid overlapping labels\n",
    "    all_texts = texts + autotexts if \"autotexts\" in locals() else texts\n",
    "    adjust_text(all_texts, arrowprops=dict(arrowstyle=\"-\", color=\"gray\", lw=0.5))\n",
    "\n",
    "    ax.set_title(\"Stock Portfolio Distribution by Current Value\")\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9aadcb11-52ea-486f-89a7-25089a2ac994",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_unrealized_gains(unrealized_gains):\n",
    "    \"\"\"\n",
    "    Plots a bar chart of unrealized gains for each asset in the portfolio using Seaborn.\n",
    "\n",
    "    Parameters:\n",
    "    - unrealized_gains (dict): A dictionary where keys are stock names and values are unrealized gains in USD.\n",
    "    \"\"\"\n",
    "    # Convert the dictionary to a DataFrame for easier plotting\n",
    "    df = pd.DataFrame(\n",
    "        list(unrealized_gains.items()), columns=[\"Stock\", \"Unrealized Gain\"]\n",
    "    )\n",
    "\n",
    "    # Set the aesthetic style of the plots\n",
    "    sns.set_style(\"whitegrid\")\n",
    "\n",
    "    # Create a seaborn barplot\n",
    "    plt.figure(figsize=(12, 7))\n",
    "    barplot = sns.barplot(x=\"Stock\", y=\"Unrealized Gain\", data=df, edgecolor=\"black\")\n",
    "\n",
    "    # Add title and labels\n",
    "    plt.title(\"Unrealized Gains of Current Portfolio\", fontsize=16)\n",
    "    plt.xlabel(\"Stocks\", fontsize=14)\n",
    "    plt.ylabel(\"Unrealized Gains (USD)\", fontsize=14)\n",
    "\n",
    "    # Rotate x labels for better readability\n",
    "    # barplot.set_xticklabels(barplot.get_xticklabels(), rotation=45, horizontalalignment='right', fontsize=12)\n",
    "\n",
    "    # Annotate each bar with the gain values\n",
    "    for p in barplot.patches:\n",
    "        barplot.annotate(\n",
    "            f\"{p.get_height():.2f}\",\n",
    "            (p.get_x() + p.get_width() / 2.0, p.get_height()),\n",
    "            ha=\"center\",\n",
    "            va=\"center\",\n",
    "            xytext=(0, 10),\n",
    "            textcoords=\"offset points\",\n",
    "            fontsize=12,\n",
    "            fontweight=\"bold\",\n",
    "        )\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6abed7f0-2968-4861-983e-e8cf8689a39a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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d+9Wenq6QkJCsgVSkrRx40ZJ+Td9K9P06dPVtGlTLVmyJMt2Pz8/DR48WFL2KWY3q169upydnbV//35zOHCjU6dOaf/+/XJxcZG/v3+ea+3evbt5kf2jR4/est/q1au1bds22djY6IUXXjBvz1z0PXOR90xpaWnau3dvnuu6mYODgwIDA5Wenq6///47W7vJZFJoaKheeOEF7d69O8/nsdaoqjJlyujRRx/VpUuXclyz6erVq+bvuaWBbG5rzzzuqlWrcmz//fffJd15uuTNgoODZTAYtGnTJiUkJGRr37Jliy5evGj+uQgAKBwIpQAAhc5rr70mSRo9erT++eefbO3h4eH6+uuvJUl9+vS5p7X07NlTkvTuu+/q1KlT5u0pKSn65JNPdOjQIV2/ft08wivzSWE3hzvbtm3Tp59+mmX/3AgPD9dHH30kW1tbff3116pUqdIt+7q4uKhz5866fv26Bg8enCV4uHbtmt5//31FRkaqSJEi5lFRmdf55Zdf6tixY+b+x44d07hx43JVa5kyZTRq1CjZ2Nho4MCBGjdunC5evJilT3p6ujZs2KBOnTpp7dq1kv537zL/d9euXVlqT01N1TfffGMON5KTk3NV152UL19e0dHR+v7777Osx2MymbR06VJJyvLkuZw4Ozurc+fOSk9P16BBg7Jc98WLF/X2228rPT1dHTp0yHH9Lks99thjeu2115SSkqJu3bpp9erV2YLOVatWafDgwTKZTHr55ZezfGYyFySfNWuWeZvRaNSYMWNyvRbRnbz00kuSpE8//VT79+83b09PT9c333yjrVu36vTp09kWSc+NzBFYOYUp+S3zu/Lhhx9mCR6vXbumwYMHKyEhQU2bNrV4LbbMNfEsrb1z585ycXHRr7/+ql9//TVLW1hYmP773//KxcUl25P57qRs2bJq1qyZEhISNHjw4CxPh4yKijKPsrvxCYIAgIKP6XsAgEKnVatW2rt3r6ZPn66XXnpJlSpV0mOPPSaDwaDjx4/r6NGjMhgMGjhwoFq0aHFPa+nRo4d27dqlFStWqHXr1vL395e7u7t2796t8+fPq0SJEuaATJJefvlljRo1Su+9954WLlwoT09PnTp1SgcOHJC7u7t5vaULFy7kaoRX//79lZKSogoVKmj9+vVatWqVUlNTs/V7/fXXVbFiRQ0aNEgHDhzQli1b1KJFC/n7+8vZ2Vk7d+5UfHy8KlSokGVdpgYNGqh3796aMmWK2rVrp7p160rKGB3h5+en2NjYXN235s2ba/bs2Xr33Xf1ww8/aNq0aapWrZpKlSql69ev69ChQ+bwo2zZsnrvvffM72WdOnVUrVo17d+/Xy1btjSPltq9e7fi4uJUuXJlHTlyJNc13UmzZs3UokUL/fnnn2rRooVq1qypIkWK6PDhw4qMjJSHh4feeOONOx7n7bff1v79+7Vt2zY1b97cPGJl69atunbtmkJCQvTOO+/cdb39+/dXWlqavv/+e/Xr10+lS5eWj4+PHB0dtX//fvPove7du2c7X69evbRjxw79+OOP2rJli8qWLau9e/fqwoULevbZZ7V8+fK7ri9T8+bN1atXL82YMUOdOnWSn5+fSpYsqYMHDyoqKkrOzs767rvv7mpqX4UKFSRJixYt0rlz5/TEE0+oU6dO+XQFWYWGhmrnzp36/fff1apVK9WpU0fOzs7avn27Ll26JF9fX33++ecWHy9zLa2//vpLffr0UVBQkDmYz4mXl5dGjx6tt99+W++//75mzpypxx57TCdOnNDBgwfl7OysL7/8MlcPKMg0YsQIRUZGau3atWrWrJlq1aqlxMREbd26VSkpKWrdurU5lAMAFA6EUgCAQundd99V06ZN9csvvygiIsI8JaZkyZJ6/vnn9eKLL6pGjRr3vA4bGxt9/fXXatKkiRYtWqSDBw8qLS1Njz76qJ599ln16tXLvBaLlDEqxMPDQzNnztThw4e1d+9elSlTRqGhoXr11Vc1depUzZkzR+vWrcvV4+EzR9xERkYqMjLylv06deqkihUrysnJSTNmzNCCBQu0dOlS89Qob29vhYaGqkePHtmm/w0aNEjVqlXTrFmztH37djk5Oen555/X4MGDc5xGdye1a9fW77//rjVr1mj58uU6duyYjhw5IoPBoJIlS6pBgwZq1qyZmjVrlmWqo62trWbOnKlJkyZp3bp12rhxo5ycnFSxYkUNHDhQHTp0UP369bV7927Fxsbm2/o2BoNBX3/9tWbOnKkVK1Zox44dMhqNKlWqlEJDQ9WnTx/zel23k3nv58+fr6VLl2rLli2ytbVV5cqV1b59e3Xq1CnfFr1+88031bhxYy1atEg7duzQli1blJ6eLg8PD7Vu3Vovvvhiju9d8+bNNXny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x+Mp6UYAAACUJkeOHFHfvn2VmZmpSpUqqUuXLmrdurVatWql6Ohov7Lbt2/XkiVLtGTJEt1zzz1q1aqV7rzzTmVlZWnIkCHasWOHEhISdOutt+rUqVN6//33df78eb366qvq0aOHJCkrK0t/+ctftH//fvXu3VutWrVScnKyFixYoCpVqmjx4sUqU6ZMnonO3333Xb300kuKj4/XjBkzZLVadf78ed15551yu9269957VbFiRR04cEALFy5U5cqVtXLlSgUHB5fEaQUAAKUMc0oBAAAUsRo1amjOnDkaO3asfvnlF33wwQf64IMPfPt69uypYcOGKTw8XLGxsTp48KCWLFmiFi1a6M4775QkzZkzRzt27NBjjz2mJ554wlf3wIED1adPHz333HPq2LGjIiIiNGfOHO3fv18vvPCC7r33Xl/ZevXq6emnn9ayZcs0ZMgQvza+9957eumll9SzZ09NnTrVtxrfxo0bdfz4cU2fPl2JiYm+8jfddJOWLVumgwcPqkmTJsV27gAAwI2D4XsAAADFIDY2VitXrtT8+fM1fPhwxcbGymKx6MiRI5o1a5b69Olz2eFwn332mYKDgzVixAi/7VFRUbr//vuVlpamr7/+WpJ3YvUyZcroL3/5i1/Znj17avHixbr77rv9ts+fP1+TJk1SXFycXn31VV8gJXnDJ0n673//q3Xr1ikzM1OSNHToUH388ccEUgAAoMjQUwoAAKCYGI1GtWnTRm3atJHknfdpw4YNmjVrlg4cOKCXXnpJb7zxRr7HHj16VNWrV893qFzdunUlSceOHZPknQOqVq1aMplMfuUsFouaNWuW5/jJkyfLaDRqz549Sk9PV5kyZXz7mjdvrkcffVSzZ8/WY489JovFoubNm+v2229X3759FRUVdW0nAwAA4BL0lAIAAChCmZmZmj59uhYuXJhnX1hYmBITE7Vw4UKVKVNGmzZtKrCey0376Xa7JXlX8pMkp9Mpg8FQ6DYOHjxYEyZMUEpKiiZOnJhn/5NPPqkNGzZo4sSJSkhI0C+//KJp06ape/fu+U6yDgAAcC0IpQAAAIpQcHCw5s6dq1mzZsnhcORbpkyZMqpatapCQkIKrCcmJkbJycm+FfFyO3DggCSpatWqkqRq1arp6NGjvrAqh8vl0pNPPqn58+f7bR8zZowGDBigDh066KOPPtK6det8+1JTU7Vx40aVLVtWAwYM0IwZM/Ttt99qypQpyszM1Jw5cwp3IgAAAK6AUAoAAKAIGY1G9evXT6mpqZoyZYqcTmeeMt9//73279+v7t27+46R5Bcq3XHHHbLZbHr77bf9jk1NTdXChQsVFhamjh07SpK6du2qc+fOadmyZX5lP//8c61atUpZWVn5tvXFF19UaGionn/+eZ05c0aStGTJEg0dOlRr1671lTMYDGrRooUk5RkiCAAAcK0Mnsv1DQcAAMBVy8zM1PDhw/X999+rZs2a6t69u6pVqya73a5t27bps88+U/369fXee+8pPDxcGzZs0PDhw9W2bVv17t1bffv2lcPh0P3336/du3era9euat++vU6fPq33339fZ8+e1dSpU9WrVy9JUnp6uu655x4dOnRId911l5o1a6bDhw9r0aJFuvnmm7Vw4UKFhoZq8ODB2rJli3bv3u2b3Hz+/Pl68cUXlZiYqOnTp+vUqVO6++67lZaWpgEDBqhu3bo6c+aMPvjgA6WkpOi9995Ty5YtS/L0AgCAUoJQCgAAoBi43W4tX75cq1at0t69e3X27FkFBwerdu3a6tGjhwYNGuSbE8rhcGjMmDFat26dDAaDPvzwQ918883KzMzU7NmztWrVKv3666+KiIhQq1at9NBDD/l6LuU4f/683nzzTa1Zs0YnT55UlSpVlJCQoEcffVRly5aVpHxDKY/Ho/vvv19bt27VjBkz1KNHDyUnJ2vWrFnavHmzUlNTFRoaqlatWumRRx7Jd+J0AACAa0EoBQAAAAAAgIBjTikAAAAAAAAEHKEUAAAAAAAAAo5QCgAAAAAAAAFHKAUAAAAAAICAI5QCAAAAAABAwBFKAQAAAAAAIOAIpQAAAAAAABBwhFIAAAAAAAAIOEIpAAAAAAAABByhFAAAAAAAAAKOUAoAAAAAAAABRygFAAAAAACAgCOUAgAAAAAAQMD9fzij/Xb8+kY+AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1200x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Call the function to plot the unrealized gains\n",
    "plot_unrealized_gains(unrealized_gains_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4adaa321-3580-4886-87c2-2909be0e75ed",
   "metadata": {},
   "source": [
    "# Stock Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "369d3c08-b43e-4740-9aa7-3164bf500276",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load data\n",
    "data_loader = DataLoader(type1_PATH)\n",
    "type1_data = data_loader.get_type1_data()\n",
    "\n",
    "# Filter only stock transactions\n",
    "stock_transactions = type1_data.copy()  # [type1_data['type_of_asset'] == 'stock']\n",
    "\n",
    "# Process stock transactions and fetch current values\n",
    "stocks = Stocks()\n",
    "stocks.process_transactions(stock_transactions)\n",
    "\n",
    "owned_assets_dict = stocks.get_owned_assets()\n",
    "current_stock_values, unrealized_gains_dict = stocks.fetch_current_values()\n",
    "realized_gains_dict = stocks.get_realized_gains()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "72d39f37-6b69-437f-ac9f-8c48ca0bfd52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>asset</th>\n",
       "      <th>Initial investment</th>\n",
       "      <th>Shares sold</th>\n",
       "      <th>Total value sold</th>\n",
       "      <th>Date last sell</th>\n",
       "      <th>Realized gains</th>\n",
       "      <th>Rate of return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SPOT</td>\n",
       "      <td>417.32</td>\n",
       "      <td>1.50</td>\n",
       "      <td>409.86</td>\n",
       "      <td>2020-09-03</td>\n",
       "      <td>7.46</td>\n",
       "      <td>1.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NVDA</td>\n",
       "      <td>982.96</td>\n",
       "      <td>2.20</td>\n",
       "      <td>937.49</td>\n",
       "      <td>2020-08-03</td>\n",
       "      <td>45.47</td>\n",
       "      <td>4.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ADBE</td>\n",
       "      <td>98.89</td>\n",
       "      <td>0.20</td>\n",
       "      <td>92.77</td>\n",
       "      <td>2020-08-20</td>\n",
       "      <td>6.12</td>\n",
       "      <td>6.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GOOG</td>\n",
       "      <td>820.02</td>\n",
       "      <td>0.50</td>\n",
       "      <td>777.11</td>\n",
       "      <td>2020-08-20</td>\n",
       "      <td>42.91</td>\n",
       "      <td>5.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>MSFT</td>\n",
       "      <td>254.10</td>\n",
       "      <td>1.00</td>\n",
       "      <td>229.99</td>\n",
       "      <td>2020-09-02</td>\n",
       "      <td>24.11</td>\n",
       "      <td>9.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ELAN</td>\n",
       "      <td>288.80</td>\n",
       "      <td>10.00</td>\n",
       "      <td>281.60</td>\n",
       "      <td>2020-09-30</td>\n",
       "      <td>7.20</td>\n",
       "      <td>2.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CRWD</td>\n",
       "      <td>152.71</td>\n",
       "      <td>1.00</td>\n",
       "      <td>144.58</td>\n",
       "      <td>2020-11-23</td>\n",
       "      <td>8.13</td>\n",
       "      <td>5.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>REGI</td>\n",
       "      <td>830.22</td>\n",
       "      <td>6.00</td>\n",
       "      <td>526.50</td>\n",
       "      <td>2021-01-07</td>\n",
       "      <td>303.72</td>\n",
       "      <td>36.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DOCU</td>\n",
       "      <td>129.84</td>\n",
       "      <td>0.45</td>\n",
       "      <td>125.13</td>\n",
       "      <td>2021-07-15</td>\n",
       "      <td>4.71</td>\n",
       "      <td>3.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ULTA</td>\n",
       "      <td>494.77</td>\n",
       "      <td>1.00</td>\n",
       "      <td>366.26</td>\n",
       "      <td>2021-09-20</td>\n",
       "      <td>128.51</td>\n",
       "      <td>25.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>BA</td>\n",
       "      <td>456.66</td>\n",
       "      <td>2.00</td>\n",
       "      <td>418.06</td>\n",
       "      <td>2021-09-21</td>\n",
       "      <td>38.60</td>\n",
       "      <td>8.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>TSLA</td>\n",
       "      <td>1075.79</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1109.61</td>\n",
       "      <td>2021-09-21</td>\n",
       "      <td>-33.82</td>\n",
       "      <td>-3.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>LNG</td>\n",
       "      <td>995.20</td>\n",
       "      <td>8.00</td>\n",
       "      <td>703.68</td>\n",
       "      <td>2021-09-21</td>\n",
       "      <td>291.52</td>\n",
       "      <td>29.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>AMC</td>\n",
       "      <td>258.50</td>\n",
       "      <td>10.00</td>\n",
       "      <td>203.70</td>\n",
       "      <td>2022-01-14</td>\n",
       "      <td>54.80</td>\n",
       "      <td>21.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>NFLX</td>\n",
       "      <td>1266.92</td>\n",
       "      <td>2.00</td>\n",
       "      <td>860.36</td>\n",
       "      <td>2023-06-20</td>\n",
       "      <td>406.56</td>\n",
       "      <td>32.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>GOOGL</td>\n",
       "      <td>1069.78</td>\n",
       "      <td>6.00</td>\n",
       "      <td>844.86</td>\n",
       "      <td>2024-02-15</td>\n",
       "      <td>224.92</td>\n",
       "      <td>21.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>ALL</td>\n",
       "      <td>829.30</td>\n",
       "      <td>4.00</td>\n",
       "      <td>646.28</td>\n",
       "      <td>2024-02-15</td>\n",
       "      <td>183.02</td>\n",
       "      <td>22.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>ABNB</td>\n",
       "      <td>1004.96</td>\n",
       "      <td>7.00</td>\n",
       "      <td>1051.12</td>\n",
       "      <td>2024-02-15</td>\n",
       "      <td>-46.16</td>\n",
       "      <td>-4.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>BTU</td>\n",
       "      <td>548.20</td>\n",
       "      <td>20.00</td>\n",
       "      <td>490.40</td>\n",
       "      <td>2024-02-15</td>\n",
       "      <td>57.80</td>\n",
       "      <td>10.54</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    asset Initial investment  Shares sold Total value sold Date last sell  \\\n",
       "0    SPOT             417.32         1.50           409.86     2020-09-03   \n",
       "1    NVDA             982.96         2.20           937.49     2020-08-03   \n",
       "2    ADBE              98.89         0.20            92.77     2020-08-20   \n",
       "3    GOOG             820.02         0.50           777.11     2020-08-20   \n",
       "4    MSFT             254.10         1.00           229.99     2020-09-02   \n",
       "5    ELAN             288.80        10.00           281.60     2020-09-30   \n",
       "6    CRWD             152.71         1.00           144.58     2020-11-23   \n",
       "7    REGI             830.22         6.00           526.50     2021-01-07   \n",
       "8    DOCU             129.84         0.45           125.13     2021-07-15   \n",
       "9    ULTA             494.77         1.00           366.26     2021-09-20   \n",
       "10     BA             456.66         2.00           418.06     2021-09-21   \n",
       "11   TSLA            1075.79         1.50          1109.61     2021-09-21   \n",
       "12    LNG             995.20         8.00           703.68     2021-09-21   \n",
       "13    AMC             258.50        10.00           203.70     2022-01-14   \n",
       "14   NFLX            1266.92         2.00           860.36     2023-06-20   \n",
       "15  GOOGL            1069.78         6.00           844.86     2024-02-15   \n",
       "16    ALL             829.30         4.00           646.28     2024-02-15   \n",
       "17   ABNB            1004.96         7.00          1051.12     2024-02-15   \n",
       "18    BTU             548.20        20.00           490.40     2024-02-15   \n",
       "\n",
       "   Realized gains Rate of return  \n",
       "0            7.46           1.79  \n",
       "1           45.47           4.63  \n",
       "2            6.12           6.19  \n",
       "3           42.91           5.23  \n",
       "4           24.11           9.49  \n",
       "5            7.20           2.49  \n",
       "6            8.13           5.32  \n",
       "7          303.72          36.58  \n",
       "8            4.71           3.63  \n",
       "9          128.51          25.97  \n",
       "10          38.60           8.45  \n",
       "11         -33.82          -3.14  \n",
       "12         291.52          29.29  \n",
       "13          54.80          21.20  \n",
       "14         406.56          32.09  \n",
       "15         224.92          21.02  \n",
       "16         183.02          22.07  \n",
       "17         -46.16          -4.59  \n",
       "18          57.80          10.54  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = []\n",
    "for asset, gains_data in realized_gains_dict[1].items():\n",
    "    realized_gains, total_sold_value, total_shares_sold, date_of_last_sell = gains_data\n",
    "    data.append(\n",
    "        [asset, total_shares_sold, date_of_last_sell, total_sold_value, realized_gains]\n",
    "    )\n",
    "\n",
    "df = pd.DataFrame(\n",
    "    data,\n",
    "    columns=[\n",
    "        \"asset\",\n",
    "        \"Shares sold\",\n",
    "        \"Date last sell\",\n",
    "        \"Total value sold\",\n",
    "        \"Realized gains\",\n",
    "    ],\n",
    ")\n",
    "df[\"Initial investment\"] = df[\"Total value sold\"] + df[\"Realized gains\"]\n",
    "df[\"Rate of return\"] = (\n",
    "    df[\"Realized gains\"] / df[\"Initial investment\"] * 100\n",
    ")  # excluding dividents\n",
    "df = df[\n",
    "    [\n",
    "        \"asset\",\n",
    "        \"Initial investment\",\n",
    "        \"Shares sold\",\n",
    "        \"Total value sold\",\n",
    "        \"Date last sell\",\n",
    "        \"Realized gains\",\n",
    "        \"Rate of return\",\n",
    "    ]\n",
    "]\n",
    "\n",
    "columns_to_format = [\n",
    "    \"Realized gains\",\n",
    "    \"Rate of return\",\n",
    "    \"Initial investment\",\n",
    "    \"Total value sold\",\n",
    "]\n",
    "for column in columns_to_format:\n",
    "    df[column] = df[column].apply(lambda x: f\"{x:.2f}\")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fc3fe0fa-d640-4bb3-bc50-c015c4e17ca3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'asset': 'SPOT',\n",
       "  'Initial investment': 417.32000000000005,\n",
       "  'Shares sold': 1.5,\n",
       "  'Total value sold': 409.86,\n",
       "  'Date last sell': Timestamp('2020-09-03 00:00:00'),\n",
       "  'Realized gains': 7.460000000000008,\n",
       "  'Rate of return': 1.7875970478290057},\n",
       " {'asset': 'NVDA',\n",
       "  'Initial investment': 982.9559999999999,\n",
       "  'Shares sold': 2.2,\n",
       "  'Total value sold': 937.4879999999999,\n",
       "  'Date last sell': Timestamp('2020-08-03 00:00:00'),\n",
       "  'Realized gains': 45.467999999999975,\n",
       "  'Rate of return': 4.625639397897768},\n",
       " {'asset': 'ADBE',\n",
       "  'Initial investment': 98.89000000000001,\n",
       "  'Shares sold': 0.2,\n",
       "  'Total value sold': 92.77000000000001,\n",
       "  'Date last sell': Timestamp('2020-08-20 00:00:00'),\n",
       "  'Realized gains': 6.1200000000000045,\n",
       "  'Rate of return': 6.188694509050464},\n",
       " {'asset': 'GOOG',\n",
       "  'Initial investment': 820.02,\n",
       "  'Shares sold': 0.5,\n",
       "  'Total value sold': 777.11,\n",
       "  'Date last sell': Timestamp('2020-08-20 00:00:00'),\n",
       "  'Realized gains': 42.90999999999997,\n",
       "  'Rate of return': 5.232799200019508},\n",
       " {'asset': 'MSFT',\n",
       "  'Initial investment': 254.10000000000002,\n",
       "  'Shares sold': 1.0,\n",
       "  'Total value sold': 229.99,\n",
       "  'Date last sell': Timestamp('2020-09-02 00:00:00'),\n",
       "  'Realized gains': 24.110000000000014,\n",
       "  'Rate of return': 9.48839039748131},\n",
       " {'asset': 'ELAN',\n",
       "  'Initial investment': 288.8,\n",
       "  'Shares sold': 10.0,\n",
       "  'Total value sold': 281.6,\n",
       "  'Date last sell': Timestamp('2020-09-30 00:00:00'),\n",
       "  'Realized gains': 7.199999999999989,\n",
       "  'Rate of return': 2.4930747922437635},\n",
       " {'asset': 'CRWD',\n",
       "  'Initial investment': 152.71000000000004,\n",
       "  'Shares sold': 1.0,\n",
       "  'Total value sold': 144.58,\n",
       "  'Date last sell': Timestamp('2020-11-23 00:00:00'),\n",
       "  'Realized gains': 8.130000000000024,\n",
       "  'Rate of return': 5.3238163839958235},\n",
       " {'asset': 'REGI',\n",
       "  'Initial investment': 830.22,\n",
       "  'Shares sold': 6.0,\n",
       "  'Total value sold': 526.5,\n",
       "  'Date last sell': Timestamp('2021-01-07 00:00:00'),\n",
       "  'Realized gains': 303.71999999999997,\n",
       "  'Rate of return': 36.58307436583074},\n",
       " {'asset': 'DOCU',\n",
       "  'Initial investment': 129.843,\n",
       "  'Shares sold': 0.45,\n",
       "  'Total value sold': 125.1315,\n",
       "  'Date last sell': Timestamp('2021-07-15 00:00:00'),\n",
       "  'Realized gains': 4.711499999999987,\n",
       "  'Rate of return': 3.6286130172592954},\n",
       " {'asset': 'ULTA',\n",
       "  'Initial investment': 494.77,\n",
       "  'Shares sold': 1.0,\n",
       "  'Total value sold': 366.26,\n",
       "  'Date last sell': Timestamp('2021-09-20 00:00:00'),\n",
       "  'Realized gains': 128.51,\n",
       "  'Rate of return': 25.973684742405563},\n",
       " {'asset': 'BA',\n",
       "  'Initial investment': 456.66,\n",
       "  'Shares sold': 2.0,\n",
       "  'Total value sold': 418.06,\n",
       "  'Date last sell': Timestamp('2021-09-21 00:00:00'),\n",
       "  'Realized gains': 38.60000000000002,\n",
       "  'Rate of return': 8.45267814128674},\n",
       " {'asset': 'TSLA',\n",
       "  'Initial investment': 1075.7900000000002,\n",
       "  'Shares sold': 1.5,\n",
       "  'Total value sold': 1109.6100000000001,\n",
       "  'Date last sell': Timestamp('2021-09-21 00:00:00'),\n",
       "  'Realized gains': -33.819999999999936,\n",
       "  'Rate of return': -3.143736231048804},\n",
       " {'asset': 'LNG',\n",
       "  'Initial investment': 995.1999999999998,\n",
       "  'Shares sold': 8.0,\n",
       "  'Total value sold': 703.68,\n",
       "  'Date last sell': Timestamp('2021-09-21 00:00:00'),\n",
       "  'Realized gains': 291.5199999999999,\n",
       "  'Rate of return': 29.292604501607716},\n",
       " {'asset': 'AMC',\n",
       "  'Initial investment': 258.5,\n",
       "  'Shares sold': 10.0,\n",
       "  'Total value sold': 203.70000000000002,\n",
       "  'Date last sell': Timestamp('2022-01-14 00:00:00'),\n",
       "  'Realized gains': 54.800000000000004,\n",
       "  'Rate of return': 21.199226305609287},\n",
       " {'asset': 'NFLX',\n",
       "  'Initial investment': 1266.92,\n",
       "  'Shares sold': 2.0,\n",
       "  'Total value sold': 860.36,\n",
       "  'Date last sell': Timestamp('2023-06-20 00:00:00'),\n",
       "  'Realized gains': 406.56,\n",
       "  'Rate of return': 32.09042402045906},\n",
       " {'asset': 'GOOGL',\n",
       "  'Initial investment': 1069.78,\n",
       "  'Shares sold': 6.0,\n",
       "  'Total value sold': 844.86,\n",
       "  'Date last sell': Timestamp('2024-02-15 00:00:00'),\n",
       "  'Realized gains': 224.92000000000002,\n",
       "  'Rate of return': 21.02488362093141},\n",
       " {'asset': 'ALL',\n",
       "  'Initial investment': 829.3,\n",
       "  'Shares sold': 4.0,\n",
       "  'Total value sold': 646.28,\n",
       "  'Date last sell': Timestamp('2024-02-15 00:00:00'),\n",
       "  'Realized gains': 183.01999999999998,\n",
       "  'Rate of return': 22.069215000602917},\n",
       " {'asset': 'ABNB',\n",
       "  'Initial investment': 1004.9599999999999,\n",
       "  'Shares sold': 7.0,\n",
       "  'Total value sold': 1051.12,\n",
       "  'Date last sell': Timestamp('2024-02-15 00:00:00'),\n",
       "  'Realized gains': -46.16,\n",
       "  'Rate of return': -4.593217640503105},\n",
       " {'asset': 'BTU',\n",
       "  'Initial investment': 548.1999999999999,\n",
       "  'Shares sold': 20.0,\n",
       "  'Total value sold': 490.4,\n",
       "  'Date last sell': Timestamp('2024-02-15 00:00:00'),\n",
       "  'Realized gains': 57.799999999999976,\n",
       "  'Rate of return': 10.543597227289307}]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3c13a2ab-1e4c-423b-b0ee-595b4ce52685",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_portfolio_distribution_3d(owned_assets_dict, current_stock_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "498808ce-05f1-4b41-b417-54f7bb132423",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current Portfolio Value:  6982.4499797821045\n",
      "Stock Percentages of Portfolio:  {'RTX': np.float64(33.810482354278435), 'INTC': np.float64(2.379680543981421), 'MSFT': np.float64(30.84948684244192), 'RUN': np.float64(3.1980177767723066), 'NEE': np.float64(2.4140523461917285), 'JKS': np.float64(1.7512477041534853), 'GME': np.float64(12.663892836958873), 'CHK': np.float64(5.3355199358374525), 'BHP': np.float64(7.597619659384375)}\n"
     ]
    }
   ],
   "source": [
    "portfolio_manager = PortfolioManager(stock_transactions)\n",
    "print(\"Current Portfolio Value: \", portfolio_manager.current_portfolio_value())\n",
    "print(\n",
    "    \"Stock Percentages of Portfolio: \",\n",
    "    portfolio_manager.stock_percentage_of_portfolio(),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "930a35fc-8b54-4a9e-906e-a25327f49a6d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

    ```

    portfolio_tracker/__init__.py:
    ```

    ```

    portfolio_tracker/app.py:
    ```
from portfolio_tracker.layout import create_layout
from portfolio_tracker.loader import DataLoader
from portfolio_tracker.manager import PortfolioManager
from portfolio_tracker.config import config
from dash import Dash, Input, Output

# Load data
data_loader = DataLoader(config.type1_path)
type1_data = data_loader.get_type1_data()

# Process stock transactions
portfolio_manager = PortfolioManager(type1_data, asset_type="stock")
realized_gains_df = portfolio_manager.stocks.generate_realized_gains_dataframe()  
portfolio_overview = portfolio_manager.get_portfolio_overview()

# Create Dash app
app = Dash(__name__)
app.layout = create_layout(realized_gains_df, portfolio_overview)


# Run the app
if __name__ == "__main__":
    app.run_server(debug=True)

    ```

    portfolio_tracker/config.py:
    ```
from dataclasses import dataclass
from pathlib import Path
from portfolio_tracker.utils import get_data_folder_path


@dataclass(frozen=True, kw_only=True)
class Config:
    data_path: Path
    type1_path: Path
    type2_path: Path
    type3_path: Path


# Set paths
DATA_PATH = Path(get_data_folder_path(data_type="private"))

config = Config(
    data_path=DATA_PATH,
    type1_path=DATA_PATH / "type1.csv",
    type2_path=DATA_PATH / "type2.csv",
    type3_path=DATA_PATH / "type3.csv",
)

# Formatting constants
COLUMNS_TO_FORMAT = [
    "Realized gains",
    "Rate of return (%)",
    "Initial investment",
    "Total value sold",
]
DATE_COLUMN = "Date last sell"


# Formatting helper
def format_dataframe(df):
    """Format numerical and date columns."""
    for column in COLUMNS_TO_FORMAT:
        df[column] = df[column].apply(lambda x: f"{x:.2f}")
    df[DATE_COLUMN] = df[DATE_COLUMN].dt.strftime("%d-%m-%Y")
    return df

    ```

    portfolio_tracker/data_fetching.py:
    ```
import pandas as pd

import yfinance as yf
from portfolio_tracker.config import config
import ccxt
# from forex_python.converter import CurrencyRates


def fetch_exchange_rate(base_currency, target_currency, start_date, end_date):
    """
    Fetches the exchange rates between two currencies for a specific date range.

    Parameters:
    - base_currency: Base currency code (e.g., 'USD')
    - target_currency: Target currency code (e.g., 'GBP')
    - start_date: Start date for the data (YYYY-MM-DD)
    - end_date: End date for the data (YYYY-MM-DD)

    Returns:
    - DataFrame with exchange rates and dates formatted as '%m/%d/%Y'.
    """
    ticker = f"{base_currency}{target_currency}=X"
    data = yf.Ticker(ticker)

    # Fetch data with a slightly larger range to ensure start_date is included
    fetch_start_date = pd.to_datetime(start_date) - pd.DateOffset(days=5)
    fetch_end_date = pd.to_datetime(end_date) + pd.DateOffset(days=5)

    hist = data.history(start=fetch_start_date, end=fetch_end_date)

    if not hist.empty:
        # Reset index to have 'Date' as a column
        hist_reset = hist[["Close"]].reset_index()

        # Format the 'Date' column
        hist_reset["Date"] = hist_reset["Date"].dt.strftime("%m/%d/%Y")
        hist_reset = hist_reset.rename(columns={"Close": "exchange_rate"})

        # Set the formatted date column as the index
        hist_reset = hist_reset[["Date", "exchange_rate"]]
        hist_reset.set_index("Date", inplace=True)

        # Ensure the DataFrame includes all dates from start_date to end_date
        all_dates = pd.date_range(start=start_date, end=end_date).strftime("%m/%d/%Y")
        full_df = pd.DataFrame(index=all_dates)
        full_df = full_df.join(hist_reset, how="left")

        # Fill in missing values
        full_df["exchange_rate"] = full_df["exchange_rate"].ffill()  # Forward fill
        full_df["exchange_rate"] = full_df["exchange_rate"].bfill()  # Backward fill

        return full_df
    else:
        # Return an empty DataFrame with the correct columns if no data was fetched
        all_dates = pd.date_range(start=start_date, end=end_date).strftime("%m/%d/%Y")
        full_df = pd.DataFrame(index=all_dates, columns=["exchange_rate"])
        return full_df


### BUG: currency change for the below functions


def fetch_stock_prices(symbols, currency="USD"):
    """
    Fetches the current prices of multiple stocks or index funds.

    Parameters:
    - symbols: List of ticker symbols of the stocks/index funds (e.g., ['AAPL', 'MSFT'])
    - currency: Currency to convert to ('USD' or 'GBP')

    Returns:
    - Dictionary where keys are symbols and values are current prices in the specified currency.
    """
    prices = {}
    tickers = yf.Tickers(" ".join(symbols))
    exchange_rate = fetch_exchange_rate("USD", "GBP") if currency == "GBP" else 1

    for symbol in symbols:
        ticker = tickers.tickers[symbol]
        data = ticker.history(period="1d")
        if not data.empty:
            price = data["Close"].iloc[-1] * exchange_rate
            prices[symbol] = price

    return prices


def fetch_crypto_price(symbol, currency="USD"):
    """
    Fetches the current price of a cryptocurrency.

    Parameters:
    - symbol: Ticker symbol of the cryptocurrency (e.g., 'BTC' for Bitcoin)
    - currency: Currency to convert to ('USD' or 'GBP')

    Returns:
    - Current price of the cryptocurrency in the specified currency.
    """
    exchange_name = config.crypto_exchange_map.get(symbol, "binance")
    exchange = getattr(ccxt, exchange_name)()
    ticker = exchange.fetch_ticker(symbol + "/USDT")
    price = ticker["last"]

    return price if currency == "USD" else price * fetch_exchange_rate("USD", currency)

    ```

    portfolio_tracker/layout.py:
    ```
import dash_bootstrap_components as dbc
import pandas as pd
from dash import dcc, html
from dash.dash_table import DataTable

# Styling configurations
column_band_mapping = {
    "pct_diff": [0, 1, 2, 5, 10],  # Example bands for pct_diff
    "ref_vol": [0, 0.5, 1, 2, 3],  # Example bands for ref_vol
}

colors = [
    ("#FFDDC1", "#000000"),  # Low bands (bg, text)
    ("#FFC4A3", "#000000"),
    ("#FFAAA5", "#000000"),
    ("#FF8A80", "#FFFFFF"),  # High bands
]


def generate_style_data_conditional() -> list:
    """Generate conditional styles for the DataTable."""
    style_data_conditional = []
    for col, bands in column_band_mapping.items():
        for i, (bg_color, text_color) in enumerate(colors):
            low = 0 if i == 0 else bands[i - 1]
            high = bands[i] if i < len(bands) else float("inf")
            style_data_conditional.append(
                {
                    "if": {
                        "filter_query": f"{{{col}}} >= {low} && {{{col}}} < {high}",
                        "column_id": col,
                    },
                    "backgroundColor": bg_color,
                    "color": text_color,
                }
            )
    return style_data_conditional


def create_layout(df_realized_gains: pd.DataFrame, portfolio_overview: pd.DataFrame):
    """Create the layout for the Dash app."""
    style_data_conditional = generate_style_data_conditional()

    return dbc.Container(
        [
            # Header
            dbc.Row(
                dbc.Col(
                    html.H1("Portfolio Tracker", className="text-center mb-4"),
                    width=12,
                )
            ),
            # Portfolio Overview Table
            dbc.Row(
                [
                    dbc.Col(
                        dbc.Card(
                            [
                                dbc.CardHeader(html.H4("Portfolio Overview")),
                                dbc.CardBody(
                                    DataTable(
                                        data=portfolio_overview.reset_index().to_dict("records"),
                                        columns=[
                                            {"name": "Metric", "id": "Metric"},
                                            {"name": "Stocks", "id": "Stocks"},
                                        ],
                                        id="portfolio-overview-table",
                                        style_table={"overflowX": "auto"},
                                        style_data={
                                            "backgroundColor": "rgb(50, 50, 50)",
                                            "color": "white",
                                        },
                                        style_cell={"textAlign": "center"},
                                        style_header={
                                            "fontWeight": "bold",
                                            "backgroundColor": "rgb(30, 30, 30)",
                                            "color": "white",
                                        },
                                    )
                                ),
                            ],
                            className="shadow-sm mb-4",
                        ),
                        width=12,
                    ),
                ]
            ),
            # Realized Gains Table
            dbc.Row(
                [
                    dbc.Col(
                        dbc.Card(
                            [
                                dbc.CardHeader(html.H4("Realized Gains")),
                                dbc.CardBody(
                                    DataTable(
                                        data=df_realized_gains.to_dict("records"),
                                        columns=[
                                            {"name": i, "id": i}
                                            for i in df_realized_gains.columns
                                        ],
                                        id="realized-gains-table",
                                        style_table={"overflowX": "auto"},
                                        style_data={
                                            "backgroundColor": "rgb(50, 50, 50)",
                                            "color": "white",
                                        },
                                        style_cell={"textAlign": "center"},
                                        style_header={
                                            "fontWeight": "bold",
                                            "backgroundColor": "rgb(30, 30, 30)",
                                            "color": "white",
                                        },
                                        style_data_conditional=style_data_conditional,
                                        sort_action="native",
                                        sort_mode="multi",
                                        page_action="native",
                                        page_size=20,
                                    )
                                ),
                            ],
                            className="shadow-sm mb-4",
                        ),
                        width=12,
                    ),
                ]
            ),
            # Interval component
            dcc.Interval(id="interval-component", interval=1 * 1000, n_intervals=0),
        ],
        fluid=True,
        className="p-4",
    )

    ```

    portfolio_tracker/loader.py:
    ```
"""
There are 3 types of datasets:
1. type1: ['date', 'security', 'type_of_asset', 'action', 'quantity', 'total_transaction_price_usd']

This is the "fundamental type of dataset, which will be initially implemented in the portfolio tracker.

Future features will include crypto-currencies and commisions through:

2. type2: ['date', 'security_1', 'security_2', 'quantity_security_1', 'quantity_security_2']
3. type3: ['date', 'commission', 'amount']

"""

import pandas as pd
import datetime
# from portfolio_tracker.config import type1_PATH, type2_PATH, type3_PATH

CURRENT_DATE = datetime.datetime.now().date()


class DataLoader:
    """
    A class for loading the three types of datasets (if they exist in the data path).
    """

    def __init__(self, type1_path, type2_path=None, type3_path=None):
        self.type1_df = pd.read_csv(type1_path)
        self.type2_df = pd.read_csv(type2_path) if type2_path else None
        self.type3_df = pd.read_csv(type3_path) if type3_path else None

        # Convert columns to appropriate data types
        self._convert_types()

    def _convert_types(self):
        """
        Convert columns to appropriate data types and sort type1_df by date.
        """

        def clean_and_convert_to_float(series):
            # Ensure the series is a string, then remove commas and convert to float
            return series.astype(str).str.replace(",", "").astype(float)

        self.type1_df["quantity"] = clean_and_convert_to_float(
            self.type1_df["quantity"]
        )
        self.type1_df["price_per_share"] = clean_and_convert_to_float(
            self.type1_df["price_per_share"]
        )
        self.type1_df["total_transaction_price"] = clean_and_convert_to_float(
            self.type1_df["total_transaction_price"]
        )
        self.type1_df["date"] = pd.to_datetime(self.type1_df["date"], format="%m/%d/%Y")

        # Sort by date
        self.type1_df.sort_values(by="date", inplace=True)

    def get_type1_data(self):
        return self.type1_df

    def get_type2_data(self):
        return self.type2_df

    def get_type3_data(self):
        return self.type3_df

    ```

    portfolio_tracker/manager.py:
    ```
import pandas as pd
from collections import deque

from portfolio_tracker.config import format_dataframe
from portfolio_tracker.data_fetching import fetch_stock_prices, fetch_exchange_rate


class Stocks:
    def __init__(self) -> None:
        # Dictionary to track owned shares for each stock, where each stock maps to a deque of lots
        self.owned_shares = {}
        self.investment_per_asset = {}
        # Track total realized gains and gains per asset
        self.realized_gains = 0
        self.realized_gains_per_asset = {}
        # Track unrealized gains per asset
        self.unrealized_gains_per_asset = {}
        # Initialize exchange rates
        self.exchange_rates = {}

    def process_transactions(self, transactions: pd.DataFrame) -> None:
        """
        Process transactions and update the owned shares dictionary.

        Parameters:
        - transactions (DataFrame): DataFrame containing transactional data with columns:
            - 'date': Date of the transaction
            - 'security': Name of the security (e.g., 'TSLA')
            - 'type_of_asset': Type of asset ('stock', 'crypto', 'index_fund' etc.)
            - 'action': Action of the transaction ('buy' or 'sell')
            - 'quantity': Number of shares involved in the transaction
            - 'total_transaction_price_usd': Total transaction price in USD at the time of transaction
        """
        # Extract currencies and fetch exchange rates
        currencies = transactions["currency"].unique()

        earliest_dates = {}
        for currency in currencies:
            if currency != "USD":
                earliest_date = transactions[transactions["currency"] == currency][
                    "date"
                ].min()
                earliest_dates[currency] = earliest_date

        end_date = pd.Timestamp.now().strftime("%Y-%m-%d")  # Current date
        for currency, earliest_date in earliest_dates.items():
            self.exchange_rates[currency] = fetch_exchange_rate(
                currency, "USD", earliest_date, end_date
            )

        for _, transaction in transactions.iterrows():
            security = transaction["security"]
            action = transaction["action"]
            quantity = transaction["quantity"]
            total_price = transaction["total_transaction_price"]
            price_per_share = transaction["price_per_share"]
            currency = transaction["currency"]
            date = transaction["date"]

            if currency != "USD":
                exchange_rate = self.exchange_rates[currency].loc[
                    date.strftime("%m/%d/%Y"), "exchange_rate"
                ]
                if pd.isna(exchange_rate):
                    raise ValueError(
                        f"Exchange rate not available for {currency} on {date}"
                    )
                price_per_share = price_per_share * exchange_rate
                total_price = total_price * exchange_rate

            if security not in self.owned_shares:
                self.owned_shares[security] = deque()
                self.investment_per_asset[security] = 0

            if action == "buy":
                # Add the new purchase as a lot to the deque for this security
                self.owned_shares[security].append((quantity, price_per_share))
                self.investment_per_asset[security] += total_price
            elif action == "sell":
                self._sell_shares(security, quantity, price_per_share, date)

            # Remove the security from owned_shares if the total quantity is zero
            if sum(quantity for quantity, _ in self.owned_shares[security]) <= 0:
                del self.owned_shares[security]
                del self.investment_per_asset[security]

    def _sell_shares(self, security: str, quantity: float, selling_price: float, transaction_date) -> None:
        """
        Helper function to sell shares using the FIFO method and update realized gains.

        Parameters:
        - security: The stock being sold.
        - quantity: The number of shares being sold.
        - selling_price: The price at which the shares are being sold.
        - transaction_date
        """
        if (
            security not in self.owned_shares
            or sum(q for q, _ in self.owned_shares[security]) < quantity
        ):
            raise ValueError(f"Not enough shares of {security} to sell {quantity}")

        remaining_quantity = quantity

        while remaining_quantity > 0:
            lot_quantity, lot_price = self.owned_shares[security][0]
            if lot_quantity > remaining_quantity:
                realized_gain = remaining_quantity * (selling_price - lot_price)
                self.realized_gains += realized_gain
                if security not in self.realized_gains_per_asset:
                    self.realized_gains_per_asset[security] = [
                        0,
                        0,
                        0,
                        0,
                    ]  # (realized_gains, total_sold_value, total_shares_sold, date_of_last_sell) # 0

                # Updates self.realized_gains_per_asset dictionary
                self.realized_gains_per_asset[security][0] += realized_gain

                self.owned_shares[security][0] = (
                    lot_quantity - remaining_quantity,
                    lot_price,
                )
                self.investment_per_asset[security] -= remaining_quantity * lot_price
                remaining_quantity = 0
            else:
                realized_gain = lot_quantity * (selling_price - lot_price)
                self.realized_gains += realized_gain
                if security not in self.realized_gains_per_asset:
                    self.realized_gains_per_asset[security] = [
                        0,
                        0,
                        0,
                        0,
                    ]  # (realized_gains, total_sold_value, total_shares_sold, date_of_last_sell)  # 0
                self.realized_gains_per_asset[security][0] += realized_gain
                remaining_quantity -= lot_quantity
                self.investment_per_asset[security] -= lot_quantity * lot_price
                self.owned_shares[security].popleft()

        self.realized_gains_per_asset[security][1] += quantity * selling_price
        self.realized_gains_per_asset[security][2] += quantity
        self.realized_gains_per_asset[security][3] = transaction_date

    def get_owned_assets(self) -> dict[str, float]:
        """
        Get the current number of shares owned for each stock.

        Returns:
        - owned_assets (dict): A dictionary where keys are stock names and values are total number of shares owned.
        """
        owned_assets = {
            security: sum(quantity for quantity, _ in lots)
            for security, lots in self.owned_shares.items()
        }

        return owned_assets

    def fetch_current_values(self) -> tuple[dict, dict]:
        """
        Fetch the current values and unrealized gains of the stocks currently owned.

        Returns:
        - current_values (dict): A dictionary where keys are stock names and values are current values in USD.
        - unrealized_gains (dict): A dictionary where keys are stock names and values are unrealized gains in USD.
        """
        owned_assets = self.get_owned_assets()
        symbols = list(owned_assets.keys())

        # Fetch current prices of owned stocks
        current_prices = fetch_stock_prices(symbols)

        # Calculate current values and unrealized gains
        current_values = {}
        self.unrealized_gains_per_asset = {}
        for symbol, shares in owned_assets.items():
            current_value = shares * current_prices.get(symbol, 0)
            current_values[symbol] = current_value

            # Calculate unrealized gains
            total_cost_basis = sum(
                quantity * price for quantity, price in self.owned_shares[symbol]
            )
            unrealized_gain = current_value - total_cost_basis
            self.unrealized_gains_per_asset[symbol] = unrealized_gain

        return current_values, self.unrealized_gains_per_asset

    def get_realized_gains(self) -> tuple[float, dict]:
        """
        Get the total realized gains and realized gains per asset.

        Returns:
        - realized_gains (float): Total realized gains across all assets.
        - realized_gains_per_asset (dict): A dictionary where keys are stock names and values are realized gains in USD.
        """
        return self.realized_gains, self.realized_gains_per_asset

    def generate_realized_gains_dataframe(self) -> pd.DataFrame:
        """Build and return the DataFrame for realized gains."""
        _, realized_gains_dict = self.get_realized_gains()

        data = []
        for asset, gains_data in realized_gains_dict.items():
            realized_gains, total_sold_value, total_shares_sold, date_of_last_sell = (
                gains_data
            )
            data.append(
                [
                    asset,
                    total_shares_sold,
                    date_of_last_sell,
                    total_sold_value,
                    realized_gains,
                ]
            )

        df = pd.DataFrame(
            data,
            columns=[
                "asset",
                "Shares sold",
                "Date last sell",
                "Total value sold",
                "Realized gains",
            ],
        )

        # Add additional columns
        df["Initial investment"] = df["Total value sold"] + df["Realized gains"]
        df["Rate of return (%)"] = df["Realized gains"] / df["Initial investment"] * 100
        df["Date last sell"] = pd.to_datetime(df["Date last sell"])

        return format_dataframe(df)


class PortfolioManager:
    def __init__(self, transactions: pd.DataFrame, asset_type: str) -> None:
        self.transactions = transactions
        self.stocks = Stocks()
        self.stocks.process_transactions(
            self.transactions[
                (self.transactions["type_of_asset"] == "stock")
            ]
        )
        self._current_values = None

    def _update_current_values(self):
        """
        Update the current values of the stocks and store them in an internal attribute.
        """
        self._current_values = self.stocks.fetch_current_values()[0]

    def current_portfolio_value(self):
        """
        Calculate the current value of the portfolio.

        Returns:
        - total_value (float): The total current value of the portfolio in USD.
        """
        if self._current_values is None:
            self._update_current_values()

        total_value = sum(self._current_values.values())
        return total_value

    def stock_percentage_of_portfolio(self):
        """
        Calculate the percentage of each stock in the total portfolio.

        Returns:
        - stock_percentages (dict): A dictionary where keys are stock names and values are their percentage of the total portfolio.
        """
        if self._current_values is None:
            self._update_current_values()

        total_value = self.current_portfolio_value()

        stock_percentages = {}
        for symbol, value in self._current_values.items():
            stock_percentages[symbol] = (
                (value / total_value) * 100 if total_value != 0 else 0
            )

        return stock_percentages

    def get_portfolio_overview(self) -> pd.DataFrame:
        """Computes the portfolio overview for Index Funds and Stocks.

        Returns:
        - pd.DataFrame: A DataFrame with columns 'Index Funds' and 'Stocks',
          and rows ['Current Value', 'Investment', 'Unrealized Gains'].
        """
        # Ensure current values are updated
        if self._current_values is None:
            self._update_current_values()

        # Calculate current values and unrealized gains
        current_values, unrealized_gains = self.stocks.fetch_current_values()

        owned_stocks = {
            k: v for k, v in self.stocks.investment_per_asset.items()
            if self.transactions[self.transactions["security"] == k]["type_of_asset"].iloc[0] == "stock"
        }
        total_investment_stocks = sum(owned_stocks.values())
        current_value_stocks = sum(current_values.get(k, 0) for k in owned_stocks.keys())
        unrealized_gains_stocks = sum(unrealized_gains.get(k, 0) for k in owned_stocks.keys())

        # Create overview DataFrame
        overview = {
            "Metric": ["Current Value", "Investment", "Unrealized Gains"],
            "Stocks": [current_value_stocks, total_investment_stocks, unrealized_gains_stocks],
        }

        return pd.DataFrame(overview).set_index("Metric")
    ```

    portfolio_tracker/utils.py:
    ```
import os


def get_data_folder_path(data_type: str = "public"):
    """
    Get the folder path for storing datasets.

    :param data_type: 'public' for shared datasets, 'private' for personal data.
    :return: data folder path
    """
    current_dir = os.path.dirname(os.path.abspath(__file__))

    if data_type == "public":
        data_folder = os.path.join(current_dir, "..", "data")
    elif data_type == "private":
        data_folder = os.path.join(current_dir, "..", "data/personal_data")
    else:
        raise ValueError("Data type not supported.")

    return os.path.abspath(data_folder)

    ```
